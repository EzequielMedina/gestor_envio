// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/asignarEnvio.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/ports/asignarEnvio.go -destination=mocks/mock_asignarEnvio.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	requests "main.go/internal/adapter/handler/api/requests"
	response "main.go/internal/adapter/handler/api/response"
	domain "main.go/internal/core/domain"
)

// MockAsignarEnvioService is a mock of AsignarEnvioService interface.
type MockAsignarEnvioService struct {
	ctrl     *gomock.Controller
	recorder *MockAsignarEnvioServiceMockRecorder
	isgomock struct{}
}

// MockAsignarEnvioServiceMockRecorder is the mock recorder for MockAsignarEnvioService.
type MockAsignarEnvioServiceMockRecorder struct {
	mock *MockAsignarEnvioService
}

// NewMockAsignarEnvioService creates a new mock instance.
func NewMockAsignarEnvioService(ctrl *gomock.Controller) *MockAsignarEnvioService {
	mock := &MockAsignarEnvioService{ctrl: ctrl}
	mock.recorder = &MockAsignarEnvioServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsignarEnvioService) EXPECT() *MockAsignarEnvioServiceMockRecorder {
	return m.recorder
}

// AsignarEnvioTransportista mocks base method.
func (m *MockAsignarEnvioService) AsignarEnvioTransportista(asignarEnvioRequest *requests.AsignarEnvio) (response.AsignarEnvio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsignarEnvioTransportista", asignarEnvioRequest)
	ret0, _ := ret[0].(response.AsignarEnvio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsignarEnvioTransportista indicates an expected call of AsignarEnvioTransportista.
func (mr *MockAsignarEnvioServiceMockRecorder) AsignarEnvioTransportista(asignarEnvioRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsignarEnvioTransportista", reflect.TypeOf((*MockAsignarEnvioService)(nil).AsignarEnvioTransportista), asignarEnvioRequest)
}

// MockAsignarEnvioRepository is a mock of AsignarEnvioRepository interface.
type MockAsignarEnvioRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAsignarEnvioRepositoryMockRecorder
	isgomock struct{}
}

// MockAsignarEnvioRepositoryMockRecorder is the mock recorder for MockAsignarEnvioRepository.
type MockAsignarEnvioRepositoryMockRecorder struct {
	mock *MockAsignarEnvioRepository
}

// NewMockAsignarEnvioRepository creates a new mock instance.
func NewMockAsignarEnvioRepository(ctrl *gomock.Controller) *MockAsignarEnvioRepository {
	mock := &MockAsignarEnvioRepository{ctrl: ctrl}
	mock.recorder = &MockAsignarEnvioRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsignarEnvioRepository) EXPECT() *MockAsignarEnvioRepositoryMockRecorder {
	return m.recorder
}

// AsignarEnvioTransportista mocks base method.
func (m *MockAsignarEnvioRepository) AsignarEnvioTransportista(asiginarEnvio *domain.AsignacionEnvio) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsignarEnvioTransportista", asiginarEnvio)
	ret0, _ := ret[0].(error)
	return ret0
}

// AsignarEnvioTransportista indicates an expected call of AsignarEnvioTransportista.
func (mr *MockAsignarEnvioRepositoryMockRecorder) AsignarEnvioTransportista(asiginarEnvio any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsignarEnvioTransportista", reflect.TypeOf((*MockAsignarEnvioRepository)(nil).AsignarEnvioTransportista), asiginarEnvio)
}

// ValidarPedidoSinAsignar mocks base method.
func (m *MockAsignarEnvioRepository) ValidarPedidoSinAsignar(envioId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidarPedidoSinAsignar", envioId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidarPedidoSinAsignar indicates an expected call of ValidarPedidoSinAsignar.
func (mr *MockAsignarEnvioRepositoryMockRecorder) ValidarPedidoSinAsignar(envioId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidarPedidoSinAsignar", reflect.TypeOf((*MockAsignarEnvioRepository)(nil).ValidarPedidoSinAsignar), envioId)
}

// ValidarTransportistaSinPedidoAsignado mocks base method.
func (m *MockAsignarEnvioRepository) ValidarTransportistaSinPedidoAsignado(transportistaId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidarTransportistaSinPedidoAsignado", transportistaId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidarTransportistaSinPedidoAsignado indicates an expected call of ValidarTransportistaSinPedidoAsignado.
func (mr *MockAsignarEnvioRepositoryMockRecorder) ValidarTransportistaSinPedidoAsignado(transportistaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidarTransportistaSinPedidoAsignado", reflect.TypeOf((*MockAsignarEnvioRepository)(nil).ValidarTransportistaSinPedidoAsignado), transportistaId)
}
