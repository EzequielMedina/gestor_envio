// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/envio.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/ports/envio.go -destination=mocks/mock_envio.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	requests "main.go/internal/adapter/handler/api/requests"
	domain "main.go/internal/core/domain"
)

// MockEnvioService is a mock of EnvioService interface.
type MockEnvioService struct {
	ctrl     *gomock.Controller
	recorder *MockEnvioServiceMockRecorder
	isgomock struct{}
}

// MockEnvioServiceMockRecorder is the mock recorder for MockEnvioService.
type MockEnvioServiceMockRecorder struct {
	mock *MockEnvioService
}

// NewMockEnvioService creates a new mock instance.
func NewMockEnvioService(ctrl *gomock.Controller) *MockEnvioService {
	mock := &MockEnvioService{ctrl: ctrl}
	mock.recorder = &MockEnvioServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvioService) EXPECT() *MockEnvioServiceMockRecorder {
	return m.recorder
}

// EnvioByNumeroSeguimiento mocks base method.
func (m *MockEnvioService) EnvioByNumeroSeguimiento(numeroPedido string) (*domain.Envio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvioByNumeroSeguimiento", numeroPedido)
	ret0, _ := ret[0].(*domain.Envio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvioByNumeroSeguimiento indicates an expected call of EnvioByNumeroSeguimiento.
func (mr *MockEnvioServiceMockRecorder) EnvioByNumeroSeguimiento(numeroPedido any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvioByNumeroSeguimiento", reflect.TypeOf((*MockEnvioService)(nil).EnvioByNumeroSeguimiento), numeroPedido)
}

// RegistrarEnvio mocks base method.
func (m *MockEnvioService) RegistrarEnvio(envioResquests *requests.EnvioRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarEnvio", envioResquests)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistrarEnvio indicates an expected call of RegistrarEnvio.
func (mr *MockEnvioServiceMockRecorder) RegistrarEnvio(envioResquests any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarEnvio", reflect.TypeOf((*MockEnvioService)(nil).RegistrarEnvio), envioResquests)
}

// ValidarNumeroSeguimiento mocks base method.
func (m *MockEnvioService) ValidarNumeroSeguimiento(numeroPedido string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidarNumeroSeguimiento", numeroPedido)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidarNumeroSeguimiento indicates an expected call of ValidarNumeroSeguimiento.
func (mr *MockEnvioServiceMockRecorder) ValidarNumeroSeguimiento(numeroPedido any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidarNumeroSeguimiento", reflect.TypeOf((*MockEnvioService)(nil).ValidarNumeroSeguimiento), numeroPedido)
}

// MockEnvioRepository is a mock of EnvioRepository interface.
type MockEnvioRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnvioRepositoryMockRecorder
	isgomock struct{}
}

// MockEnvioRepositoryMockRecorder is the mock recorder for MockEnvioRepository.
type MockEnvioRepositoryMockRecorder struct {
	mock *MockEnvioRepository
}

// NewMockEnvioRepository creates a new mock instance.
func NewMockEnvioRepository(ctrl *gomock.Controller) *MockEnvioRepository {
	mock := &MockEnvioRepository{ctrl: ctrl}
	mock.recorder = &MockEnvioRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvioRepository) EXPECT() *MockEnvioRepositoryMockRecorder {
	return m.recorder
}

// EnvioByNumeroSeguimiento mocks base method.
func (m *MockEnvioRepository) EnvioByNumeroSeguimiento(numeroPedido string) (*domain.Envio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvioByNumeroSeguimiento", numeroPedido)
	ret0, _ := ret[0].(*domain.Envio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvioByNumeroSeguimiento indicates an expected call of EnvioByNumeroSeguimiento.
func (mr *MockEnvioRepositoryMockRecorder) EnvioByNumeroSeguimiento(numeroPedido any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvioByNumeroSeguimiento", reflect.TypeOf((*MockEnvioRepository)(nil).EnvioByNumeroSeguimiento), numeroPedido)
}

// RegistrarEnvio mocks base method.
func (m *MockEnvioRepository) RegistrarEnvio(envio *domain.Envio) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarEnvio", envio)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistrarEnvio indicates an expected call of RegistrarEnvio.
func (mr *MockEnvioRepositoryMockRecorder) RegistrarEnvio(envio any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarEnvio", reflect.TypeOf((*MockEnvioRepository)(nil).RegistrarEnvio), envio)
}

// ValidarNumeroSeguimiento mocks base method.
func (m *MockEnvioRepository) ValidarNumeroSeguimiento(numeroPedido string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidarNumeroSeguimiento", numeroPedido)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidarNumeroSeguimiento indicates an expected call of ValidarNumeroSeguimiento.
func (mr *MockEnvioRepositoryMockRecorder) ValidarNumeroSeguimiento(numeroPedido any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidarNumeroSeguimiento", reflect.TypeOf((*MockEnvioRepository)(nil).ValidarNumeroSeguimiento), numeroPedido)
}
