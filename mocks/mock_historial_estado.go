// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/historialEstados.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/ports/historialEstados.go -destination=mocks/mock_historial_estado.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	estados "main.go/internal/core/domain/estados"
)

// MockHistorialEstadoService is a mock of HistorialEstadoService interface.
type MockHistorialEstadoService struct {
	ctrl     *gomock.Controller
	recorder *MockHistorialEstadoServiceMockRecorder
	isgomock struct{}
}

// MockHistorialEstadoServiceMockRecorder is the mock recorder for MockHistorialEstadoService.
type MockHistorialEstadoServiceMockRecorder struct {
	mock *MockHistorialEstadoService
}

// NewMockHistorialEstadoService creates a new mock instance.
func NewMockHistorialEstadoService(ctrl *gomock.Controller) *MockHistorialEstadoService {
	mock := &MockHistorialEstadoService{ctrl: ctrl}
	mock.recorder = &MockHistorialEstadoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistorialEstadoService) EXPECT() *MockHistorialEstadoServiceMockRecorder {
	return m.recorder
}

// RegistrarHistorialEstado mocks base method.
func (m *MockHistorialEstadoService) RegistrarHistorialEstado(historialEstado *estados.HistorialEstado) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarHistorialEstado", historialEstado)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegistrarHistorialEstado indicates an expected call of RegistrarHistorialEstado.
func (mr *MockHistorialEstadoServiceMockRecorder) RegistrarHistorialEstado(historialEstado any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarHistorialEstado", reflect.TypeOf((*MockHistorialEstadoService)(nil).RegistrarHistorialEstado), historialEstado)
}

// MockHistorialEstadoRepository is a mock of HistorialEstadoRepository interface.
type MockHistorialEstadoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHistorialEstadoRepositoryMockRecorder
	isgomock struct{}
}

// MockHistorialEstadoRepositoryMockRecorder is the mock recorder for MockHistorialEstadoRepository.
type MockHistorialEstadoRepositoryMockRecorder struct {
	mock *MockHistorialEstadoRepository
}

// NewMockHistorialEstadoRepository creates a new mock instance.
func NewMockHistorialEstadoRepository(ctrl *gomock.Controller) *MockHistorialEstadoRepository {
	mock := &MockHistorialEstadoRepository{ctrl: ctrl}
	mock.recorder = &MockHistorialEstadoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistorialEstadoRepository) EXPECT() *MockHistorialEstadoRepositoryMockRecorder {
	return m.recorder
}

// RegistrarHistorialEstado mocks base method.
func (m *MockHistorialEstadoRepository) RegistrarHistorialEstado(historialEstado *estados.HistorialEstado) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarHistorialEstado", historialEstado)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegistrarHistorialEstado indicates an expected call of RegistrarHistorialEstado.
func (mr *MockHistorialEstadoRepositoryMockRecorder) RegistrarHistorialEstado(historialEstado any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarHistorialEstado", reflect.TypeOf((*MockHistorialEstadoRepository)(nil).RegistrarHistorialEstado), historialEstado)
}
